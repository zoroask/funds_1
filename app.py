# -*- coding: utf-8 -*-
"""deplotment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13VF29G3Lupj57QsOFgNIb3_BHu8CtlB9
"""

#from jupyter_dash import JupyterDash
from dash import Dash, dcc, html
from dash.dependencies import Input, Output
import os
import plotly.graph_objs as go
import joblib
import pandas as pd
import numpy as np

external_stylesheets = [
    'https://codepen.io/chriddyp/pen/bWLwgP.css',
    {
        'href': 'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
        'rel': 'stylesheet',
        'integrity': 'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO',
        'crossorigin': 'anonymous'
    }
]

#app = JupyterDash(__name__,external_stylesheets=external_stylesheets)
app = Dash(__name__,external_stylesheets=external_stylesheets)

server = app.server

model =  joblib.load('./Model/model.pkl')
scaler = joblib.load('./Model/scaler.joblib')

# Div for carat
input_carat = dcc.Input(
    id='carat',
    type='number',
    value=0.7
)

div_carat = html.Div(
    children=[html.H3('Carat:'), input_carat],
    className="four columns"
)

# Div for depth
input_depth = dcc.Input(
    id='depth',
    placeholder='',
    type='number',
    value=60
)

div_depth = html.Div(
    children=[html.H3('Depth:'), input_depth],
    className="four columns"
)

# Div for table
input_table = dcc.Input(
    id='table',
    placeholder='',
    type='number',
    value=60
)

div_table = html.Div(
    children=[html.H3('Table:'), input_table],
    className="four columns"
)

# Div for x
input_x = dcc.Input(
    id='x',
    placeholder='',
    type='number',
    value=5
)

div_x = html.Div(
    children=[html.H3('x value:'), input_x],
    className="four columns"
)

# Div for y
input_y = dcc.Input(
    id='y',
    placeholder='',
    type='number',
    value=5
)

div_y = html.Div(
    children=[html.H3('y value:'), input_y],
    className="four columns"
)

# Div for z
input_z = dcc.Input(
    id='z',
    placeholder='',
    type='number',
    value=5
)

div_z = html.Div(
    children=[html.H3('z value:'), input_z],
    className="four columns"
)

# Div for cut
cut_values = ['Ideal','Premium','Very Good','Good','Fair']
cut_options = [{'label':x, 'value':x} for x in cut_values]
input_cut = dcc.Dropdown(
    id='cut',
    options=cut_options,
    value='Ideal'
)

div_cut = html.Div(
    children=[html.H3('Cut:'), input_cut],
    className="four columns"
)

# Div for color
color_values = ['D','E','F','G','H','I','J']
color_options = [{'label':x, 'value':x} for x in color_values]
input_color = dcc.Dropdown(
    id='color',
    options=color_options,
    value='G'
)

div_color = html.Div(
    children=[html.H3('Color:'), input_color],
    className="four columns"
)

# Div for clarity
clarity_values = ['I1','IF','SI1','SI2','VS1','VS2','VVS1','VVS2']
clarity_options = [{'label':x, 'value':x} for x in clarity_values]
input_clarity = dcc.Dropdown(
    id='clarity',
    options=clarity_options,
    value='SI1'
)

div_clarity = html.Div(
    children=[html.H3('Clarity:'), input_clarity],
    className="four columns"
)

# Div for numerical characteristics
div_numerical = html.Div(
    children=[div_carat,div_depth,div_table],
    className="row"
)

# Div for dimensions
div_dimensions = html.Div(
    children=[div_x,div_y,div_z],
    className="row"
)

# Div for categorical features
div_categorical = html.Div(
    children=[div_cut,div_color,div_clarity],
    className="row"
)

# App layout
app.layout = html.Div([
          html.H1('Predict diamond prices'),
          html.H2('Enter the diamond characteristics to get the predicted price'),
          html.Div(
              children=[div_numerical, div_dimensions, div_categorical]
          ),
          html.H1(id='output', style={'margin-top':'50px','text-align':'center'})
])

predictors = ['carat','depth','table','x','y','z','cut','color','clarity']

# take the input form the users and produce price prediction
def get_prediction(carat, depth, table, x, y, z, cut, color, clarity):
  cols = ['carat', 'depth', 'table', 'x', 'y', 'z', 'cut_Premium',
       'cut_Very Good', 'cut_Good', 'cut_Fair', 'color_E', 'color_F',
       'color_G', 'color_H', 'color_I', 'color_J', 'clarity_VVS1',
       'clarity_VVS2', 'clarity_VS1', 'clarity_VS2', 'clarity_SI1',
       'clarity_SI2', 'clarity_I1']
  cut_dict = {x:'cut_'+ x for x in cut_values[1:]}
  color_dict = {x:'color_'+ x for x in color_values[1:]}
  clarity_dict = {x:'clarity_'+ x for x in clarity_values[1:]}

  # create dataframe with a single row of zeros
  df = pd.DataFrame(data=np.zeros((1,len(cols))), columns=cols)
  
  # get numerical characteristics
  df.loc[0,'carat'] = carat
  df.loc[0,'depth'] = depth
  df.loc[0,'table'] = table
  df.loc[0,'x'] = x
  df.loc[0,'y'] = y
  df.loc[0,'z'] = z
  
  # use the one-hot encoding for the categorical features
  if cut!='Ideal':
    df.loc[0,cut_dict[cut]] = 1
  if color!='D':
    df.loc[0,color_dict[color]] = 1
  if clarity!='I1':
    df.loc[0,clarity_dict[clarity]] = 1
  
  ## Scale the numerical features using the trained scaler
  df = scaler.transform(df.to_numpy())
  
  # scale the numerical features using the trained model
  prediction = model.predict(df).flatten()[0]

  return int(prediction)

@app.callback(Output('output','children'),
              [Input(x,'value') for x in predictors]
              )
def show_prediction(carat, depth, table, x, y, z, cut, color, clarity):
  pred = get_prediction(carat, depth, table, x, y, z, cut, color, clarity)
  return str('Predicted Price: {:,}'.format(pred))

if __name__ == '__main__':
  app.run_server(debug=False)
